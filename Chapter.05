[5] Servlet의 이해

1. Servlet
웹 서비스 개발에 특화되어 있는데 데이터베이스 연동, 외부 서비스 연동을 통해 정적인 웹에 
동적인 정보 제공을 가능하게 한다.
순수 자바 코드로 작성되며, 코드 자체만 보면 일반적인 자바 클래스와 다르지 않다.
다만 HttpServlet 클래스를 상속하여 서블릿 등록에 필요한 정보를 추가해야 하며, 서블릿 단독으로 
실행할 수 없고 서블릿 컨테이너를 통해야 한다.

1) doGet() 
HTTP GET 요청을 처리하기 위한 메서드이다.

2) doPost()
HTTP POST 요청을 처리하기 위한  메서드로 보통 doGet()을 호출하여 동일하게 처리된다.

3) request, response
doGet(), doPost() 메서드에서 파라미터로 사용되며 서블릿 컨테이너가 클라이언트 요청과 응답을
처리할 수 있도록 서블릿에 제공하는 객체로 클라이언트와의 상호작용에 필요한 다양한 메서드를 제공한다.

4) HttpServletRequest
HTTP 프로토콜의 request 정보를 서블릿에 전달하기 위한 목적으로 사용한다.

5) HttpServletResponse
클라이언트에서 서버로 전달하는 것과 관련된 것이 아니라 서버에서 클라이언트로 전달하려는 목적을 
위한 기능으로 구성된다

6) Servlet 3.0 부터는 자바 애너테이션을 이용하여 가독성이 좋게 등록한다.
urlPatterns = "/hello" 
어떤 클라이언트 요청에 해당 서블릿을 실행할지 지정하는 것으로 여러 url을 등록할 수도 있다.


2. 페이지 이동
컨트롤러에서 사용자 요청을 처리한 다음에는 적절한 뷰로 이동할 수 있어야 한다.
이때 뷰에서 보여줄 데이터를 포함해서 이동해야 하는 경우와 그렇지 않아도 되는 경우가 있다.

1) 데이터를 포함하지 않는 경우
사용자 요청 처리 후 별도의 데이터를 포함하지 않는다면 해당 페이지로 바로 리디렉션 할 수 있다.
세션에 데이터를 저장한 경우라면 세션이 유효한 동안 모든 페이지에서 세션 정보를 참조할 수 있어
리디렉션을 통해서도 데이터 참조가 가능하다.
- response.sendRedirect("main.jsp");

2) 데이터를 포함하는 경우
데이터를 포함하여 이동한다면 request 속성으로 데이터를 넣은 후 원하는 페이지로 포워딩 해야한다.
데이터 활용 목적에 따라 session 이나 application을 사용할 수도 있으며 여러 데이터를 포함하는 것도 가능하다.

- JSP구현 <% pageContext.foward("main.jsp"); %>
- Servlet 구현 doGet() {dispactcher.foward(request, response); }
- Spring Framework 구현 
@GetMapping("info")
public String getMemberInfo(int id, Model model)  {
  return "userinfo";  }


3. 정보 공유
WWW은 비연결형  구조의 HTTP를  사용하기에 페이지 요청과 응답이 완료되면 연결이 유지되지 않는다.
그래서 클라이언트가 다른 페이지를 요청할 때 부가적 정보가 없다면 서버는 클라이언트의 현재 상태를
알 수 없기때문에 처음 접속한 것과 마찬가지로 인식할수밖에 없다.

1) 해결 방법
-URL rewriting
HTTP의 Query String을 이용하는 방식으로 URL에 파라미터를 추가해 서버로 요청하는 형식이다.
이 방식은 정보 유지를 위해 파라미터를 매 페이지마다 확인하고 계속 추가해주어야 하며 
복잡한 정보 유지는 어렵다는 문제점이 있다.
예) https://www.xxx.com/shop/productinfo?user=hong&p1=11786
현재 상품을 보여주면서 사용자 정보와 선택된 상품정보를 모두 URL에 포함한다.

- Cookie
클라이언트에 저장되는 작은 정보를 의미한다. 서버의 요청에 의해 브라우저가 저장하게 되며
서버가 요청할 때 제공하는 형식이다.
파일로 클라이언트의 컴퓨터에 저장되는 방식이라 보안상 문제가 있을 수 있다.
광고, 기타 목적의 경우 사용자 정보 활용 동의가 필요하다
예) response.addCookie(new Cookie(“name”,“heejeong”));

- Session
클라이언트가 웹  애플리케이션 서버에 접속할 때 서버 쪽에 생성되는 공간으로 내부적으로는
세션 아이디를 통해 참조된다. 즉 브라우저는 서버에 접속할 때 발급받은 세션 아이디를 기억하고
서버는 해당 세션 아이디로 할당된 영역에 접근하는 형식이다.
세션 유효시간 또는 브라우저 종료 전까지 유지되므로 서로 다른 페이지에서도 정보 공유가 가능하다.
사용자마다 생성되는 공간으로 동시에 많은 사용자가 세션을 통해 대량의 데이터를 관리한다면 
충분한 메모리를 비롯한 세션 관리 대책이 필요하다.


4. 속성 관리
컨테이너는 서블릿 관리를 위해 몇몇 객체를 자동으로 생성하고 유지하는데, 이러한 객체 중
속성 관리 기능을 제공하며 특정 범위 동안 유지되는 객체를 Scope Object라고 한다.
각각의 객체는 관리 목적에 따라 별도의 메서드로 구현된 기능을 가지고 있고 공통적으로는
'키-값' 형태의 맵 자료구조를 가진다. 
이를 활용하면 페이지 간, 사용자 간 데이터 공유가 가능하다.

1)
setAttribute(String name, Object o)   - 속성 저장
name 은 속성을 저장하고 참조하기 위한 키 값이다.
속성은 Object 타입으로 모든 자바 클래스 타입이 가능하다.

Object getAttribute(String naame)     - 속성 참조
getAttribute() 의 리턴은 Object이므로 적절한 형 변환이 필요하다.
예)
String name = "류희정";
request.setAttribute("name",name);
String rname = (String) request.getAttribute("name");


2) 사례1 로그인
//컨트롤러
session.setAttribute("kname","류희정");
response.sendRedirect("/main.jsp");
//main.jsp
<h2> ${kname} </h2>

3) 사례2 DB연동을 통해 리스트 형태의 데이터를 저장하고 JSP에서 사용하는 경우
//컨트롤러
List<Member> mlist = dao.getMemberList();
request.setAttribute("mlist", mlist); //리스트 형태로 데이터를 저장한다.
requrest.getRequestDispatcher("/mlist.jsp).foward(request, response);
session 과 달리 request 에 저장된 데이터는 페이지 리디렉션을 이용하면 전환할 때 데이터가
소멸되므로 포워딩 방식을 사용해야 한다.


5. Servlet 생성

1) Description 
서블릿에 대한 설명을 간단하게 기술한다

2) <URL mappings>
서블릿을 호출하기 위한 URL을 지정한다.
/ , * 등과 결합하여 패턴 형식으로 지정할 수도 있다.
예)
*.do 로 지정한 경우 호출 URL 경로와 상관없이 .do 로 끝나는 모든 요청에 실행한다는 의미가 된다.


6. Servlet Code 분석

1) @WebServlet 애너테이션
현재 클래스가 서블릿 클래스라는 것을 컨테이너에게 알려준다.
그리고 어떤 요청에 의해 서블릿을 호출할 것인지 결정하는 URL mapping 부분도 urlPatterns 속성으로 지정되어 있다.
@WebServlet(description = "first servlet", urlPatterns = {"/hello"})

2)
response.getWriter() = java.io.PrintWriter 클래스 타입의 객체를 리턴한다.
request.getContextPath() = 웹 애플리케이션 경로를 리턴하는 메서드이다.


tip : Ctrl + Shift + o 누르면 import 문 정리된다.




