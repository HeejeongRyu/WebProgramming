[4] JAVA WEB 개발 개요

1. 서블릿
자바 기반의 웹 프로그램 개발을 위해 만들어진 기술이다. 
자바로 작성된 프로그램을 실행할 수 있는 서버SW(톰캣)를 통해 관리된다. 
즉 서블릿 실행을 위해 톰캣과 같은 서블릿 컨테이너가 필요하다. 이러한 서버SW는 일반적으로 WAS로 불리기도 한다.


2. JSP
서블릿에서 HTML과 데이터 결합을 손쉽게 처리하기 위해 만들어졌다.
자바 중심의 서블릿과 달리 JSP는 HTML을 중심으로 데이터를 처리하는 특징이 있다.
HTML에서 자바 코드를 사용할 수 있는 구조다.


3. JSTL/EL
JSP의 구조적 문제를 해결하기 위해 커스텀 태그를 기반으로 하는 JSTL/EL이 도입되었다.

1)
<c:forEach> : 반복문을 제공하는 JSTL 커스텀 태그이다.
${m.name} : 표현 언어로 자바 객체의 멤버 출력이 가능하다.


4. REST(Representational State Transfer)
웹의 장점을 최대한 활용할 수 있는 아키텍처이다.
자원을 이름으로 구분하여 해당 자원의 상태를 주고받는 모든 것을 의미한다.
HTTP URI(Uniform Resource Identifier)를 통해 자원을 명시하고 HTTP Method(POST생성, GET조회, PUT수정, DELETE삭제)를 통해
해당 자원(URI)에 대한 CRUD Operation을 적용하는 것을 의미한다.

1) 아키텍처(Architecture)
영어단어로써 건축학이라는 뜻이다.
시스템 목적을 달성하기 위해 시스템의 상호 작용 등의 시스템 디자인에 대한 제약 및  설계이다.
최적화를 목표로 두고 시스템 구성과 동작원리 그리고 시스템의 구성환경 등을 설명 및 설계하는 청사진 또는 설계도이다.

2) Restful
REST의 원리를 따르는 시스템을 의미한다.

3) REST API
REST의 원리를 따르는 API를 의미한다.
클라이언트가 서버로 요청을 보냈을 때 서버가 이에 대한 응답으로 보내주는 Resource의 상태를 Representation(표현)이라고
할 수 있으며, 하나의 Resource는 여러 형태의 Representation(json, xml, text, rss 등)으로 전달할 수 있는 것을 말한다.

4) API
프로그램들이 상호 작용하는 것을 도와주는 매개체이다.

4. JAX-RS
자바에서 REST API 개발을 위한 서버 프로그램의 표준 규격
현재 자바 웹 개발에서 REST API를 구현하는 방법은 JAX-RX 또는 스프링 프레임워크의 RestController를 사용하는 방법이 있다.

1)
@Path("/add") : 현재 클래스에서 처리할 url의 진입점을 의미한다. 전체경로는 context root/api/add
@GET : 지정된 url요청을 GET 방식으로 호출했을 때 동작하도록 한다.
@PATH("list") : 메서드가 실행될 때 uri로 요청한다. 전체경로는 context root/api/add/list
@Produces(MediaType.APPLICATION_JSON) : 리턴되는 데이터를 JSON형식으로 지정한다.

-주로 @로 시작하는 자바 애너테이션을 사용하여 클래스와 메서드에 필요한 정보를 제공하는 것만으로 별도의 
 데이터 변환과정 없이 손쉽게 API서버 프로그램 개발이 가능하다.
 
5. SpringFramework
자바 기반의 오픈소스 프레임워크로, JAVA EE에서 요구하는 수준의 복잡한 기능을 JAVA EE를 사용하지 않고 구현하고자 시작한 것이다.

특징
1) 경량 컨테이너
객체 생성, 소멸과 같은 생명주기를 관리하며 스프링 컨테이너로부터 필요한 객체를 얻어 올 수 있다.

2) 제어의 역행 지원 IoC(Inversion of Control)
메서드나 객체의 호출  제어권이 사용자가 아닌 프레임워크에 있어 필요에 따라 스프링에서 사용자의 코드를 호출한다.

3) 의존성 주입 지원 DI(Dependency Injection)
각 계층이나 서비스 간에 의존성이 존재할 경우 프레임워크가 서로 연결해준다.

4)관점 지향 프로그래밍 지원 AOP(Aspect-Oriented Programming)
트랜잭션이나 로깅, 보안과 같이 여러 모듈에서 공통적으로 사용하는 기능의 경우 해당 기능을 분리하여 관리할 수 있다.


6. SpringBoot
2021년 최신 스프링프레임워크는 5.x로 핵심 프레임워크 외에 여러 서브 프로젝트로 구성되어 있으며 실제 사용은 주로
스프링 부트를 통해 이루어진다.
스프링 프레임워크 프로젝트를 손쉽게 시작할 수 있도록 도와주며 개발과 관련한 스프링 구성요소를 편하게 관리할 수 있도록 한다.

1) 스프링 부트2의 주요특징
리액티브 스택, 서블릿 스택을 구분하고 있다.
Servlet Stack
기존과 같이 서블릿 API에 기반한 동기방식의 Blocking I/O 구조를 사용하며 하나의 요청은 하나의 스레드로 처리된다. 
아파치 톰캣과 같은 서블릿 컨테이너를 사용한다.
전통적인 Spring MVC 기반의 서버 프로그램 개발과 JPA,JDBC,NoSQL DB지원을 포함한다.

Reactive Stack
새로운 비동기 Non-Blocking I/O 구조를 사용한다.
멀티코어 시스템의 장점을 살리고 대규모 사용자 접속을 처리하는데 유용한 구조로 설계되었다.
Netty, Undertow 및 서블릿 3.1 이상의 컨테이너를 사용 Spring WebFlux라고 하는 새로운 프레임워크를 사용해 개발한다.



